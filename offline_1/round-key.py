# this file generates the round keys for the AES algorithm

# round key generation algorithm
# input: 128-bit key
# output: 11 round keys (128-bit each)

"""
Steps:
1. given a 128-bit key, split it into 4 words of 32-bit each
   w[0], w[1], w[2], w[3] 
2. find the g(w[3])
    - circular byte left shift by 1
    - substitute bytes from the s-box
    - xor with rconst
3. find w[4] = w[0] xor g(w[3])
4. find w[5] = w[4] xor w[1]
5. find w[6] = w[5] xor w[2]
6. find w[7] = w[6] xor w[3] 
   .. and so on
"""
# importbitvector
from BitVector import *


# s-box
sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe,0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa,0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2,0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26,0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5,0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23,0xc3, 0x18, 0x96, 0x05, 0x9a,0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27,0xb2, 0x75,
        0x09, 0x83, 0x2c,0x1a, 0x1b, 0x6e, 0x5a, 0xa0,0x52, 0x3b, 0xd6, 0xb3, 0x29,0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00,0xed, 0x20, 0xfc, 0xb1, 0x5b,0x6a, 0xcb, 0xbe, 0x39, 0x4a,0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa,0xfb, 0x43, 0x4d, 0x33, 0x85,0x45, 0xf9, 0x02, 0x7f, 0x50,0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40,0x8f, 0x92, 0x9d, 0x38, 0xf5,0xbc, 0xb6, 0xda, 0x21, 0x10,0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13,0xec, 0x5f, 0x97, 0x44, 0x17,0xc4, 0xa7, 0x7e, 0x3d, 0x64,0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f,0xdc, 0x22, 0x2a, 0x90, 0x88,0x46, 0xee, 0xb8, 0x14, 0xde,0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a,0x0a, 0x49, 0x06, 0x24, 0x5c,0xc2, 0xd3, 0xac, 0x62, 0x91,0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37,0x6d, 0x8d, 0xd5, 0x4e, 0xa9,0x6c, 0x56, 0xf4, 0xea, 0x65,0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25,0x2e, 0x1c, 0xa6, 0xb4, 0xc6,0xe8, 0xdd, 0x74, 0x1f, 0x4b,0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5,0x66, 0x48, 0x03, 0xf6, 0x0e,0x61, 0x35, 0x57, 0xb9, 0x86,0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98,0x11, 0x69, 0xd9, 0x8e, 0x94,0x9b, 0x1e, 0x87, 0xe9, 0xce,0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89,0x0d, 0xbf, 0xe6, 0x42, 0x68,0x41, 0x99, 0x2d, 0x0f, 0xb0,0x54, 0xbb, 0x16]

# rconst
rconst = 0x01000000

# round constants
rcon = [0x01000000, 0x02000000, 0x04000000, 0x08000000,
        0x10000000, 0x20000000, 0x40000000, 0x80000000,
        0x1b000000, 0x36000000]

# circular byte left shift by 1
def rot_word(word):
    return ((word << 8) | (word >> 24)) & 0xffffffff

# substitute bytes from the s-box
def sub_word(index):
    return sbox[index]

# xor two words
def xor_word(word1, word2):
    return word1 ^ word2

# g() function
def g(word, rconst):
    """
    word: 32-bit word
        - circular byte left shift by 1
        - divide into 4 bytes
        - substitute bytes from the s-box
        - combine into a word
        - xor with round constant
    """
    # circular byte left shift by 1
    word = rot_word(word)
    # divide into 4 bytes
    byte = [0 for i in range(4)]
    for i in range(4):
        byte[i] = (word >> (24 - i*8)) & 0xff
    # substitute bytes from the s-box
    b1 = sub_word(byte[0])
    b2 = sub_word(byte[1])
    b3 = sub_word(byte[2])
    b4 = sub_word(byte[3])
    # combine into a word
    word = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4
    # xor with rconst
    word = xor_word(word, rconst)
    return word
    

# generate the key schedule
def key_schedule(key):
    """
    key: 128-bit key
    divided into 4 words of 32-bits each
    """
    # initialize the key schedule
    w = [0 for i in range(44)]
    # first 4 words are the key itself
    w[0] = key[0]
    w[1] = key[1]
    w[2] = key[2]
    w[3] = key[3]
    # g_3 = g(w[3])
    # print(hex(g_3))
    # generate the key schedule
    for i in range(4, 44):
        if i % 4 == 0:
            w[i] = xor_word(w[i-4], g(w[i-1], rcon[i//4 - 1]))
        else:
            w[i] = xor_word(w[i-4], w[i-1])
    return w

# round key
def get_round_key(key_to_expand):
    """
    key_to_expand: 128-bit key
    """

    # divide key into 4 words
    w = [0 for i in range(4)]

    # convert key into 32-bit bitvectors
    for i in range(4):
        w[i] = key_to_expand >> (32 * (3 - i)) & 0xffffffff

    # generate the key schedule
    generated_key = key_schedule(w)

    # group the generated key into 4 words block
    round_key = [0 for i in range(11)]
    for i in range(11):
        for j in range(4):
            round_key[i] = (round_key[i] << 32) | generated_key[i*4 + j]

    return round_key

# b = BitVector(hexstring="4e")
# print(b)
# intval = b.intValue()
# print(intval)
# print(hex(intval))
# print(hex(sub_word(intval)))
round_wise_key = get_round_key(0x5468617473206d79204b756e67204675)

# print the round wise key in hex (2 hex digit then space)
for i in range(11):
    # format the hex string
    hex_string = hex(round_wise_key[i])
    hex_string = hex_string[2:]
    hex_string = hex_string.zfill(32)

    hex_string = hex_string[0:2] + " " + hex_string[2:4] + " " + hex_string[4:6] + " " + hex_string[6:8] + " " + hex_string[8:10] + " " + hex_string[10:12] + " " + hex_string[12:14] + " " + hex_string[14:16] + " " + hex_string[16:18] + " " + hex_string[18:20] + " " + hex_string[20:22] + " " + hex_string[22:24] + " " + hex_string[24:26] + " " + hex_string[26:28] + " " + hex_string[28:30] + " " + hex_string[30:32]
    print(hex_string)